{"version":3,"mappings":"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","names":["useI18n","createUseI18n","keycloakifyLogoPngUrl","Template","props","displayInfo","displayMessage","displayRequiredFields","displayWide","showAnotherWayIfPresent","headerNode","showUsernameNode","infoNode","kcContext","i18n","doUseDefaultCss","classes","children","getClassName","useGetClassName","msg","changeLocale","labelBySupportedLanguageTag","currentLanguageTag","realm","locale","auth","url","message","isAppInitiatedAction","isReady","usePrepareTemplate","useEffect","jsx","jsxs","clsx","assert","languageTag","Fragment","Login","lazy","Register","RegisterUserProfile","Terms","MyExtraPage1","MyExtraPage2","Info","__vitePreload","KcApp","Suspense","Fallback"],"sources":["../../src/keycloak-theme/login/i18n.ts","../../src/keycloak-theme/login/assets/keycloakify-logo.png","../../src/keycloak-theme/login/Template.tsx","../../src/keycloak-theme/login/KcApp.tsx"],"sourcesContent":["import { createUseI18n } from \"keycloakify/login\";\n\nexport const { useI18n } = createUseI18n({\n    // NOTE: Here you can override the default i18n messages\n    // or define new ones that, for example, you would have\n    // defined in the Keycloak admin UI for UserProfile\n    // https://user-images.githubusercontent.com/6702424/182050652-522b6fe6-8ee5-49df-aca3-dba2d33f24a5.png\n    en: {\n        alphanumericalCharsOnly: \"Only alphanumerical characters\",\n        gender: \"Gender\",\n        // Here we overwrite the default english value for the message \"doForgotPassword\"\n        // that is \"Forgot Password?\" see: https://github.com/InseeFrLab/keycloakify/blob/f0ae5ea908e0aa42391af323b6d5e2fd371af851/src/lib/i18n/generated_messages/18.0.1/login/en.ts#L17\n        doForgotPassword: \"I forgot my password\",\n        invalidUserMessage: \"Invalid username or password. (this message was overwrite in the theme)\"\n    },\n    fr: {\n        /* spell-checker: disable */\n        alphanumericalCharsOnly: \"Caractère alphanumérique uniquement\",\n        gender: \"Genre\",\n        doForgotPassword: \"J'ai oublié mon mot de passe\",\n        invalidUserMessage: \"Nom d'utilisateur ou mot de passe invalide. (ce message a été écrasé dans le thème)\"\n        /* spell-checker: enable */\n    }\n});\n\nexport type I18n = NonNullable<ReturnType<typeof useI18n>>;\n","export default \"__VITE_ASSET__CJGUYEBv__\"","// Copy pasted from: https://github.com/InseeFrLab/keycloakify/blob/main/src/login/Template.tsx\n\nimport { useEffect } from \"react\";\nimport { assert } from \"keycloakify/tools/assert\";\nimport { clsx } from \"keycloakify/tools/clsx\";\nimport { usePrepareTemplate } from \"keycloakify/lib/usePrepareTemplate\";\nimport { type TemplateProps } from \"keycloakify/login/TemplateProps\";\nimport { useGetClassName } from \"keycloakify/login/lib/useGetClassName\";\nimport type { KcContext } from \"./kcContext\";\nimport type { I18n } from \"./i18n\";\nimport keycloakifyLogoPngUrl from \"./assets/keycloakify-logo.png\";\n\nexport default function Template(props: TemplateProps<KcContext, I18n>) {\n    const {\n        displayInfo = false,\n        displayMessage = true,\n        displayRequiredFields = false,\n        displayWide = false,\n        showAnotherWayIfPresent = true,\n        headerNode,\n        showUsernameNode = null,\n        infoNode = null,\n        kcContext,\n        i18n,\n        doUseDefaultCss,\n        classes,\n        children\n    } = props;\n\n    const { getClassName } = useGetClassName({ doUseDefaultCss, classes });\n\n    const { msg, changeLocale, labelBySupportedLanguageTag, currentLanguageTag } = i18n;\n\n    const { realm, locale, auth, url, message, isAppInitiatedAction } = kcContext;\n\n    const { isReady } = usePrepareTemplate({\n        \"doFetchDefaultThemeResources\": doUseDefaultCss,\n        \"styles\": [\n            `${url.resourcesCommonPath}/node_modules/patternfly/dist/css/patternfly.min.css`,\n            `${url.resourcesCommonPath}/node_modules/patternfly/dist/css/patternfly-additions.min.css`,\n            `${url.resourcesCommonPath}/lib/zocial/zocial.css`,\n            `${url.resourcesPath}/css/login.css`\n        ],\n        \"htmlClassName\": getClassName(\"kcHtmlClass\"),\n        \"bodyClassName\": getClassName(\"kcBodyClass\"),\n        \"htmlLangProperty\": locale?.currentLanguageTag,\n        \"documentTitle\": i18n.msgStr(\"loginTitle\", kcContext.realm.displayName)\n    });\n\n    useEffect(() => {\n        console.log(`Value of MY_ENV_VARIABLE on the Keycloak server: \"${kcContext.properties.MY_ENV_VARIABLE}\"`);\n    }, []);\n\n    if (!isReady) {\n        return null;\n    }\n\n    return (\n        <div className={getClassName(\"kcLoginClass\")}>\n            <div id=\"kc-header\" className={getClassName(\"kcHeaderClass\")}>\n                <div \n                    id=\"kc-header-wrapper\" \n                    className={getClassName(\"kcHeaderWrapperClass\")}\n                    style={{ \"fontFamily\": '\"Work Sans\"' }}\n                >\n                    {/* \n                        Here we are referencing the `keycloakify-logo.png` in the `public` directory.  \n                        When possible don't use this approach, instead ...\n                    */}\n                    <img src={`${import.meta.env.BASE_URL}keycloakify-logo.png`} alt=\"Keycloakify logo\" width={50} />\n                    {msg(\"loginTitleHtml\", realm.displayNameHtml)}!!!\n                    {/* ...rely on the bundler to import your assets, it's more efficient */}\n                    <img src={keycloakifyLogoPngUrl} alt=\"Keycloakify logo\" width={50} />\n                </div>\n            </div>\n\n            <div className={clsx(getClassName(\"kcFormCardClass\"), displayWide && getClassName(\"kcFormCardAccountClass\"))}>\n                <header className={getClassName(\"kcFormHeaderClass\")}>\n                    {realm.internationalizationEnabled && (assert(locale !== undefined), true) && locale.supported.length > 1 && (\n                        <div id=\"kc-locale\">\n                            <div id=\"kc-locale-wrapper\" className={getClassName(\"kcLocaleWrapperClass\")}>\n                                <div className=\"kc-dropdown\" id=\"kc-locale-dropdown\">\n                                    <a href=\"#\" id=\"kc-current-locale-link\">\n                                        {labelBySupportedLanguageTag[currentLanguageTag]}\n                                    </a>\n                                    <ul>\n                                        {locale.supported.map(({ languageTag }) => (\n                                            <li key={languageTag} className=\"kc-dropdown-item\">\n                                                <a href=\"#\" onClick={() => changeLocale(languageTag)}>\n                                                    {labelBySupportedLanguageTag[languageTag]}\n                                                </a>\n                                            </li>\n                                        ))}\n                                    </ul>\n                                </div>\n                            </div>\n                        </div>\n                    )}\n                    {!(auth !== undefined && auth.showUsername && !auth.showResetCredentials) ? (\n                        displayRequiredFields ? (\n                            <div className={getClassName(\"kcContentWrapperClass\")}>\n                                <div className={clsx(getClassName(\"kcLabelWrapperClass\"), \"subtitle\")}>\n                                    <span className=\"subtitle\">\n                                        <span className=\"required\">*</span>\n                                        {msg(\"requiredFields\")}\n                                    </span>\n                                </div>\n                                <div className=\"col-md-10\">\n                                    <h1 id=\"kc-page-title\">{headerNode}</h1>\n                                </div>\n                            </div>\n                        ) : (\n                            <h1 id=\"kc-page-title\">{headerNode}</h1>\n                        )\n                    ) : displayRequiredFields ? (\n                        <div className={getClassName(\"kcContentWrapperClass\")}>\n                            <div className={clsx(getClassName(\"kcLabelWrapperClass\"), \"subtitle\")}>\n                                <span className=\"subtitle\">\n                                    <span className=\"required\">*</span> {msg(\"requiredFields\")}\n                                </span>\n                            </div>\n                            <div className=\"col-md-10\">\n                                {showUsernameNode}\n                                <div className={getClassName(\"kcFormGroupClass\")}>\n                                    <div id=\"kc-username\">\n                                        <label id=\"kc-attempted-username\">{auth?.attemptedUsername}</label>\n                                        <a id=\"reset-login\" href={url.loginRestartFlowUrl}>\n                                            <div className=\"kc-login-tooltip\">\n                                                <i className={getClassName(\"kcResetFlowIcon\")}></i>\n                                                <span className=\"kc-tooltip-text\">{msg(\"restartLoginTooltip\")}</span>\n                                            </div>\n                                        </a>\n                                    </div>\n                                </div>\n                            </div>\n                        </div>\n                    ) : (\n                        <>\n                            {showUsernameNode}\n                            <div className={getClassName(\"kcFormGroupClass\")}>\n                                <div id=\"kc-username\">\n                                    <label id=\"kc-attempted-username\">{auth?.attemptedUsername}</label>\n                                    <a id=\"reset-login\" href={url.loginRestartFlowUrl}>\n                                        <div className=\"kc-login-tooltip\">\n                                            <i className={getClassName(\"kcResetFlowIcon\")}></i>\n                                            <span className=\"kc-tooltip-text\">{msg(\"restartLoginTooltip\")}</span>\n                                        </div>\n                                    </a>\n                                </div>\n                            </div>\n                        </>\n                    )}\n                </header>\n                <div id=\"kc-content\">\n                    <div id=\"kc-content-wrapper\">\n                        {/* App-initiated actions should not see warning messages about the need to complete the action during login. */}\n                        {displayMessage && message !== undefined && (message.type !== \"warning\" || !isAppInitiatedAction) && (\n                            <div className={clsx(\"alert\", `alert-${message.type}`)}>\n                                {message.type === \"success\" && <span className={getClassName(\"kcFeedbackSuccessIcon\")}></span>}\n                                {message.type === \"warning\" && <span className={getClassName(\"kcFeedbackWarningIcon\")}></span>}\n                                {message.type === \"error\" && <span className={getClassName(\"kcFeedbackErrorIcon\")}></span>}\n                                {message.type === \"info\" && <span className={getClassName(\"kcFeedbackInfoIcon\")}></span>}\n                                <span\n                                    className=\"kc-feedback-text\"\n                                    dangerouslySetInnerHTML={{\n                                        \"__html\": message.summary\n                                    }}\n                                />\n                            </div>\n                        )}\n                        {children}\n                        {auth !== undefined && auth.showTryAnotherWayLink && showAnotherWayIfPresent && (\n                            <form\n                                id=\"kc-select-try-another-way-form\"\n                                action={url.loginAction}\n                                method=\"post\"\n                                className={clsx(displayWide && getClassName(\"kcContentWrapperClass\"))}\n                            >\n                                <div\n                                    className={clsx(\n                                        displayWide && [getClassName(\"kcFormSocialAccountContentClass\"), getClassName(\"kcFormSocialAccountClass\")]\n                                    )}\n                                >\n                                    <div className={getClassName(\"kcFormGroupClass\")}>\n                                        <input type=\"hidden\" name=\"tryAnotherWay\" value=\"on\" />\n                                        <a\n                                            href=\"#\"\n                                            id=\"try-another-way\"\n                                            onClick={() => {\n                                                document.forms[\"kc-select-try-another-way-form\" as never].submit();\n                                                return false;\n                                            }}\n                                        >\n                                            {msg(\"doTryAnotherWay\")}\n                                        </a>\n                                    </div>\n                                </div>\n                            </form>\n                        )}\n                        {displayInfo && (\n                            <div id=\"kc-info\" className={getClassName(\"kcSignUpClass\")}>\n                                <div id=\"kc-info-wrapper\" className={getClassName(\"kcInfoAreaWrapperClass\")}>\n                                    {infoNode}\n                                </div>\n                            </div>\n                        )}\n                    </div>\n                </div>\n            </div>\n        </div>\n    );\n}\n","import \"./KcApp.css\";\nimport { lazy, Suspense } from \"react\";\nimport Fallback, { type PageProps } from \"keycloakify/login\";\nimport type { KcContext } from \"./kcContext\";\nimport { useI18n } from \"./i18n\";\nimport Template from \"./Template\";\n\nconst Login = lazy(() => import(\"./pages/Login\"));\n// If you can, favor register-user-profile.ftl over register.ftl, see: https://docs.keycloakify.dev/realtime-input-validation\nconst Register = lazy(() => import(\"./pages/Register\"));\nconst RegisterUserProfile = lazy(() => import(\"./pages/RegisterUserProfile\"));\nconst Terms = lazy(() => import(\"./pages/Terms\"));\nconst MyExtraPage1 = lazy(() => import(\"./pages/MyExtraPage1\"));\nconst MyExtraPage2 = lazy(() => import(\"./pages/MyExtraPage2\"));\nconst Info = lazy(() => import(\"keycloakify/login/pages/Info\"));\n\n// This is like adding classes to theme.properties \n// https://github.com/keycloak/keycloak/blob/11.0.3/themes/src/main/resources/theme/keycloak/login/theme.properties\nconst classes = {\n    // NOTE: The classes are defined in ./KcApp.css\n    \"kcHtmlClass\": \"my-root-class\",\n    \"kcHeaderWrapperClass\": \"my-color my-font\"\n} satisfies PageProps[\"classes\"];\n\nexport default function KcApp(props: { kcContext: KcContext; }) {\n\n    const { kcContext } = props;\n\n    const i18n = useI18n({ kcContext });\n\n    if (i18n === null) {\n        //NOTE: Text resources for the current language are still being downloaded, we can't display anything yet.\n        //We could display a loading progress but it's usually a matter of milliseconds.\n        return null;\n    }\n\n    /* \n    * Examples assuming i18n.currentLanguageTag === \"en\":\n    * i18n.msg(\"access-denied\") === <span>Access denied</span>\n    * i18n.msg(\"foo\") === <span>foo in English</span>\n    */\n\n    return (\n        <Suspense>\n            {(() => {\n                switch (kcContext.pageId) {\n                    case \"login.ftl\": return <Login {...{ kcContext, i18n, Template, classes }} doUseDefaultCss={true} />;\n                    case \"register.ftl\": return <Register {...{ kcContext, i18n, Template, classes }} doUseDefaultCss={true} />;\n                    case \"register-user-profile.ftl\": return <RegisterUserProfile {...{ kcContext, i18n, Template, classes }} doUseDefaultCss={true} />\n                    case \"terms.ftl\": return <Terms {...{ kcContext, i18n, Template, classes }} doUseDefaultCss={true} />;\n                    // Removes those pages in you project. They are included to show you how to implement keycloak pages\n                    // that are not yes implemented by Keycloakify. \n                    // See: https://docs.keycloakify.dev/limitations#some-pages-still-have-the-default-theme.-why\n                    case \"my-extra-page-1.ftl\": return <MyExtraPage1 {...{ kcContext, i18n, Template, classes }} doUseDefaultCss={true} />;\n                    case \"my-extra-page-2.ftl\": return <MyExtraPage2 {...{ kcContext, i18n, Template, classes }} doUseDefaultCss={true} />;\n                    // We choose to use the default Template for the Info page and to download the theme resources.\n                    // This is just an example to show you what is possible. You likely don't want to keep this as is. \n                    case \"info.ftl\": return (\n                        <Info\n                            {...{ kcContext, i18n, classes }}\n                            Template={lazy(() => import(\"keycloakify/login/Template\"))}\n                            doUseDefaultCss={true}\n                        />\n                    );\n                    default: return <Fallback {...{ kcContext, i18n, classes }} Template={Template} doUseDefaultCss={true} />;\n                }\n            })()}\n        </Suspense>\n    );\n\n}\n"],"file":"assets/KcApp-Z94DHlqV.js"}