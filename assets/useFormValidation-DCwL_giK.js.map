{"version":3,"file":"useFormValidation-DCwL_giK.js","sources":["../../node_modules/keycloakify/tools/Array.prototype.every.js","../../node_modules/keycloakify/tools/emailRegExp.js","../../node_modules/keycloakify/login/lib/useFormValidation.js"],"sourcesContent":["\"use strict\";\nif (!Array.prototype.every) {\n    Array.prototype.every = function (callbackfn, thisArg) {\n        \"use strict\";\n        var T, k;\n        if (this == null) {\n            throw new TypeError(\"this is null or not defined\");\n        }\n        // 1. Let O be the result of calling ToObject passing the this\n        //    value as the argument.\n        var O = Object(this);\n        // 2. Let lenValue be the result of calling the Get internal method\n        //    of O with the argument \"length\".\n        // 3. Let len be ToUint32(lenValue).\n        var len = O.length >>> 0;\n        // 4. If IsCallable(callbackfn) is false, throw a TypeError exception.\n        if (typeof callbackfn !== \"function\" && Object.prototype.toString.call(callbackfn) !== \"[object Function]\") {\n            throw new TypeError();\n        }\n        // 5. If thisArg was supplied, let T be thisArg; else let T be undefined.\n        if (arguments.length > 1) {\n            T = thisArg;\n        }\n        // 6. Let k be 0.\n        k = 0;\n        // 7. Repeat, while k < len\n        while (k < len) {\n            var kValue;\n            // a. Let Pk be ToString(k).\n            //   This is implicit for LHS operands of the in operator\n            // b. Let kPresent be the result of calling the HasProperty internal\n            //    method of O with argument Pk.\n            //   This step can be combined with c\n            // c. If kPresent is true, then\n            if (k in O) {\n                var testResult;\n                // i. Let kValue be the result of calling the Get internal method\n                //    of O with argument Pk.\n                kValue = O[k];\n                // ii. Let testResult be the result of calling the Call internal method\n                // of callbackfn with T as the this value if T is not undefined\n                // else is the result of calling callbackfn\n                // and argument list containing kValue, k, and O.\n                if (T)\n                    testResult = callbackfn.call(T, kValue, k, O);\n                else\n                    testResult = callbackfn(kValue, k, O);\n                // iii. If ToBoolean(testResult) is false, return false.\n                if (!testResult) {\n                    return false;\n                }\n            }\n            k++;\n        }\n        return true;\n    };\n}\n//# sourceMappingURL=Array.prototype.every.js.map","export const emailRegexp = /^(([^<>()\\[\\]\\\\.,;:\\s@\"]+(\\.[^<>()\\[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/;\n//# sourceMappingURL=emailRegExp.js.map","import { jsx as _jsx } from \"react/jsx-runtime\";\nimport \"../../tools/Array.prototype.every\";\nimport { useMemo, useReducer, Fragment } from \"react\";\nimport { id } from \"tsafe/id\";\nimport { useConstCallback } from \"../../tools/useConstCallback\";\nimport { emailRegexp } from \"../../tools/emailRegExp\";\n/**\n * NOTE: The attributesWithPassword returned is actually augmented with\n * artificial password related attributes only if kcContext.passwordRequired === true\n */\nexport function useFormValidation(params) {\n    const { kcContext, passwordValidators = {}, i18n } = params;\n    const attributesWithPassword = useMemo(() => !kcContext.passwordRequired\n        ? kcContext.profile.attributes\n        : (() => {\n            const name = kcContext.realm.registrationEmailAsUsername ? \"email\" : \"username\";\n            return kcContext.profile.attributes.reduce((prev, curr) => [\n                ...prev,\n                ...(curr.name !== name\n                    ? [curr]\n                    : [\n                        curr,\n                        id({\n                            \"name\": \"password\",\n                            \"displayName\": id(\"${password}\"),\n                            \"required\": true,\n                            \"readOnly\": false,\n                            \"validators\": passwordValidators,\n                            \"annotations\": {},\n                            \"groupAnnotations\": {},\n                            \"autocomplete\": \"new-password\"\n                        }),\n                        id({\n                            \"name\": \"password-confirm\",\n                            \"displayName\": id(\"${passwordConfirm}\"),\n                            \"required\": true,\n                            \"readOnly\": false,\n                            \"validators\": {\n                                \"_compareToOther\": {\n                                    \"name\": \"password\",\n                                    \"ignore.empty.value\": true,\n                                    \"shouldBe\": \"equal\",\n                                    \"error-message\": id(\"${invalidPasswordConfirmMessage}\")\n                                }\n                            },\n                            \"annotations\": {},\n                            \"groupAnnotations\": {},\n                            \"autocomplete\": \"new-password\"\n                        })\n                    ])\n            ], []);\n        })(), [kcContext, passwordValidators]);\n    const { getErrors } = useGetErrors({\n        \"kcContext\": {\n            \"messagesPerField\": kcContext.messagesPerField,\n            \"profile\": {\n                \"attributes\": attributesWithPassword\n            }\n        },\n        i18n\n    });\n    const initialInternalState = useMemo(() => Object.fromEntries(attributesWithPassword\n        .map(attribute => ({\n        attribute,\n        \"errors\": getErrors({\n            \"name\": attribute.name,\n            \"fieldValueByAttributeName\": Object.fromEntries(attributesWithPassword.map(({ name, value }) => [name, { \"value\": value !== null && value !== void 0 ? value : \"\" }]))\n        })\n    }))\n        .map(({ attribute, errors }) => {\n        var _a;\n        return [\n            attribute.name,\n            {\n                \"value\": (_a = attribute.value) !== null && _a !== void 0 ? _a : \"\",\n                errors,\n                \"doDisplayPotentialErrorMessages\": errors.length !== 0\n            }\n        ];\n    })), [attributesWithPassword]);\n    const [formValidationInternalState, formValidationDispatch] = useReducer((state, params) => (Object.assign(Object.assign({}, state), { [params.name]: Object.assign(Object.assign({}, state[params.name]), (() => {\n            switch (params.action) {\n                case \"focus lost\":\n                    return { \"doDisplayPotentialErrorMessages\": true };\n                case \"update value\":\n                    return {\n                        \"value\": params.newValue,\n                        \"errors\": getErrors({\n                            \"name\": params.name,\n                            \"fieldValueByAttributeName\": Object.assign(Object.assign({}, state), { [params.name]: { \"value\": params.newValue } })\n                        })\n                    };\n            }\n        })()) })), initialInternalState);\n    const formValidationState = useMemo(() => ({\n        \"fieldStateByAttributeName\": Object.fromEntries(Object.entries(formValidationInternalState).map(([name, { value, errors, doDisplayPotentialErrorMessages }]) => [\n            name,\n            { value, \"displayableErrors\": doDisplayPotentialErrorMessages ? errors : [] }\n        ])),\n        \"isFormSubmittable\": Object.entries(formValidationInternalState).every(([name, { value, errors }]) => errors.length === 0 && (value !== \"\" || !attributesWithPassword.find(attribute => attribute.name === name).required))\n    }), [formValidationInternalState, attributesWithPassword]);\n    return {\n        formValidationState,\n        formValidationDispatch,\n        attributesWithPassword\n    };\n}\n/** Expect to be used in a component wrapped within a <I18nProvider> */\nfunction useGetErrors(params) {\n    const { kcContext, i18n } = params;\n    const { messagesPerField, profile: { attributes } } = kcContext;\n    const { msg, msgStr, advancedMsg, advancedMsgStr } = i18n;\n    const getErrors = useConstCallback((params) => {\n        var _a;\n        const { name, fieldValueByAttributeName } = params;\n        const { value } = fieldValueByAttributeName[name];\n        const { value: defaultValue, validators } = attributes.find(attribute => attribute.name === name);\n        block: {\n            if ((defaultValue !== null && defaultValue !== void 0 ? defaultValue : \"\") !== value) {\n                break block;\n            }\n            let doesErrorExist;\n            try {\n                doesErrorExist = messagesPerField.existsError(name);\n            }\n            catch (_b) {\n                break block;\n            }\n            if (!doesErrorExist) {\n                break block;\n            }\n            const errorMessageStr = messagesPerField.get(name);\n            return [\n                {\n                    \"validatorName\": undefined,\n                    errorMessageStr,\n                    \"errorMessage\": _jsx(\"span\", { children: errorMessageStr }, 0)\n                }\n            ];\n        }\n        const errors = [];\n        scope: {\n            const validatorName = \"length\";\n            const validator = validators[validatorName];\n            if (validator === undefined) {\n                break scope;\n            }\n            const { \"ignore.empty.value\": ignoreEmptyValue = false, max, min } = validator;\n            if (ignoreEmptyValue && value === \"\") {\n                break scope;\n            }\n            if (max !== undefined && value.length > parseInt(max)) {\n                const msgArgs = [\"error-invalid-length-too-long\", max];\n                errors.push({\n                    \"errorMessage\": _jsx(Fragment, { children: msg(...msgArgs) }, errors.length),\n                    \"errorMessageStr\": msgStr(...msgArgs),\n                    validatorName\n                });\n            }\n            if (min !== undefined && value.length < parseInt(min)) {\n                const msgArgs = [\"error-invalid-length-too-short\", min];\n                errors.push({\n                    \"errorMessage\": _jsx(Fragment, { children: msg(...msgArgs) }, errors.length),\n                    \"errorMessageStr\": msgStr(...msgArgs),\n                    validatorName\n                });\n            }\n        }\n        scope: {\n            const validatorName = \"_compareToOther\";\n            const validator = validators[validatorName];\n            if (validator === undefined) {\n                break scope;\n            }\n            const { \"ignore.empty.value\": ignoreEmptyValue = false, name: otherName, shouldBe, \"error-message\": errorMessageKey } = validator;\n            if (ignoreEmptyValue && value === \"\") {\n                break scope;\n            }\n            const { value: otherValue } = fieldValueByAttributeName[otherName];\n            const isValid = (() => {\n                switch (shouldBe) {\n                    case \"different\":\n                        return otherValue !== value;\n                    case \"equal\":\n                        return otherValue === value;\n                }\n            })();\n            if (isValid) {\n                break scope;\n            }\n            const msgArg = [\n                errorMessageKey !== null && errorMessageKey !== void 0 ? errorMessageKey : id((() => {\n                    switch (shouldBe) {\n                        case \"equal\":\n                            return \"shouldBeEqual\";\n                        case \"different\":\n                            return \"shouldBeDifferent\";\n                    }\n                })()),\n                otherName,\n                name,\n                shouldBe\n            ];\n            errors.push({\n                validatorName,\n                \"errorMessage\": _jsx(Fragment, { children: advancedMsg(...msgArg) }, errors.length),\n                \"errorMessageStr\": advancedMsgStr(...msgArg)\n            });\n        }\n        scope: {\n            const validatorName = \"pattern\";\n            const validator = validators[validatorName];\n            if (validator === undefined) {\n                break scope;\n            }\n            const { \"ignore.empty.value\": ignoreEmptyValue = false, pattern, \"error-message\": errorMessageKey } = validator;\n            if (ignoreEmptyValue && value === \"\") {\n                break scope;\n            }\n            if (new RegExp(pattern).test(value)) {\n                break scope;\n            }\n            const msgArgs = [errorMessageKey !== null && errorMessageKey !== void 0 ? errorMessageKey : id(\"shouldMatchPattern\"), pattern];\n            errors.push({\n                validatorName,\n                \"errorMessage\": _jsx(Fragment, { children: advancedMsg(...msgArgs) }, errors.length),\n                \"errorMessageStr\": advancedMsgStr(...msgArgs)\n            });\n        }\n        scope: {\n            if (((_a = [...errors].reverse()[0]) === null || _a === void 0 ? void 0 : _a.validatorName) === \"pattern\") {\n                break scope;\n            }\n            const validatorName = \"email\";\n            const validator = validators[validatorName];\n            if (validator === undefined) {\n                break scope;\n            }\n            const { \"ignore.empty.value\": ignoreEmptyValue = false } = validator;\n            if (ignoreEmptyValue && value === \"\") {\n                break scope;\n            }\n            if (emailRegexp.test(value)) {\n                break scope;\n            }\n            const msgArgs = [id(\"invalidEmailMessage\")];\n            errors.push({\n                validatorName,\n                \"errorMessage\": _jsx(Fragment, { children: msg(...msgArgs) }, errors.length),\n                \"errorMessageStr\": msgStr(...msgArgs)\n            });\n        }\n        scope: {\n            const validatorName = \"integer\";\n            const validator = validators[validatorName];\n            if (validator === undefined) {\n                break scope;\n            }\n            const { \"ignore.empty.value\": ignoreEmptyValue = false, max, min } = validator;\n            if (ignoreEmptyValue && value === \"\") {\n                break scope;\n            }\n            const intValue = parseInt(value);\n            if (isNaN(intValue)) {\n                const msgArgs = [\"mustBeAnInteger\"];\n                errors.push({\n                    validatorName,\n                    \"errorMessage\": _jsx(Fragment, { children: msg(...msgArgs) }, errors.length),\n                    \"errorMessageStr\": msgStr(...msgArgs)\n                });\n                break scope;\n            }\n            if (max !== undefined && intValue > parseInt(max)) {\n                const msgArgs = [\"error-number-out-of-range-too-big\", max];\n                errors.push({\n                    validatorName,\n                    \"errorMessage\": _jsx(Fragment, { children: msg(...msgArgs) }, errors.length),\n                    \"errorMessageStr\": msgStr(...msgArgs)\n                });\n                break scope;\n            }\n            if (min !== undefined && intValue < parseInt(min)) {\n                const msgArgs = [\"error-number-out-of-range-too-small\", min];\n                errors.push({\n                    validatorName,\n                    \"errorMessage\": _jsx(Fragment, { children: msg(...msgArgs) }, errors.length),\n                    \"errorMessageStr\": msgStr(...msgArgs)\n                });\n                break scope;\n            }\n        }\n        scope: {\n            const validatorName = \"options\";\n            const validator = validators[validatorName];\n            if (validator === undefined) {\n                break scope;\n            }\n            if (value === \"\") {\n                break scope;\n            }\n            if (validator.options.indexOf(value) >= 0) {\n                break scope;\n            }\n            const msgArgs = [id(\"notAValidOption\")];\n            errors.push({\n                validatorName,\n                \"errorMessage\": _jsx(Fragment, { children: advancedMsg(...msgArgs) }, errors.length),\n                \"errorMessageStr\": advancedMsgStr(...msgArgs)\n            });\n        }\n        //TODO: Implement missing validators.\n        return errors;\n    });\n    return { getErrors };\n}\n//# sourceMappingURL=useFormValidation.js.map"],"names":["callbackfn","thisArg","T","k","O","len","kValue","testResult","emailRegexp","useFormValidation","params","kcContext","passwordValidators","i18n","attributesWithPassword","useMemo","name","prev","curr","id","getErrors","useGetErrors","initialInternalState","attribute","value","errors","_a","formValidationInternalState","formValidationDispatch","useReducer","state","doDisplayPotentialErrorMessages","messagesPerField","attributes","msg","msgStr","advancedMsg","advancedMsgStr","useConstCallback","fieldValueByAttributeName","defaultValue","validators","block","doesErrorExist","errorMessageStr","_jsx","scope","validatorName","validator","ignoreEmptyValue","max","min","msgArgs","Fragment","otherName","shouldBe","errorMessageKey","otherValue","msgArg","pattern","intValue"],"mappings":"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","x_google_ignoreList":[0,1,2]}