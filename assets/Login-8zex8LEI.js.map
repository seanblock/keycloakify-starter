{"version":3,"file":"Login-8zex8LEI.js","sources":["../../src/keycloak-theme/login/pages/Login.tsx"],"sourcesContent":["import { useState, type FormEventHandler } from \"react\";\nimport { clsx } from \"keycloakify/tools/clsx\";\nimport { useConstCallback } from \"keycloakify/tools/useConstCallback\";\nimport type { PageProps } from \"keycloakify/login/pages/PageProps\";\nimport { useGetClassName } from \"keycloakify/login/lib/useGetClassName\";\nimport type { KcContext } from \"../kcContext\";\nimport type { I18n } from \"../i18n\";\n\nconst my_custom_param = new URL(window.location.href).searchParams.get(\"my_custom_param\");\n\nif (my_custom_param !== null) {\n    console.log(\"my_custom_param:\", my_custom_param);\n}\n\nexport default function Login(props: PageProps<Extract<KcContext, { pageId: \"login.ftl\" }>, I18n>) {\n    const { kcContext, i18n, doUseDefaultCss, Template, classes } = props;\n\n    const { getClassName } = useGetClassName({\n        doUseDefaultCss,\n        classes\n    });\n\n    const { social, realm, url, usernameHidden, login, auth, registrationDisabled } = kcContext;\n\n    const { msg, msgStr } = i18n;\n\n    const [isLoginButtonDisabled, setIsLoginButtonDisabled] = useState(false);\n\n    const onSubmit = useConstCallback<FormEventHandler<HTMLFormElement>>(e => {\n        e.preventDefault();\n\n        setIsLoginButtonDisabled(true);\n\n        const formElement = e.target as HTMLFormElement;\n\n        //NOTE: Even if we login with email Keycloak expect username and password in\n        //the POST request.\n        formElement.querySelector(\"input[name='email']\")?.setAttribute(\"name\", \"username\");\n\n        formElement.submit();\n    });\n\n    return (\n        <Template\n            {...{ kcContext, i18n, doUseDefaultCss, classes }}\n            displayInfo={\n                realm.password &&\n                realm.registrationAllowed &&\n                !registrationDisabled\n            }\n            displayWide={realm.password && social.providers !== undefined}\n            headerNode={msg(\"doLogIn\")}\n            infoNode={\n                <div id=\"kc-registration\">\n                    <span>\n                        {msg(\"noAccount\")}\n                        <a tabIndex={6} href={url.registrationUrl}>\n                            {msg(\"doRegister\")}\n                        </a>\n                    </span>\n                </div>\n            }\n        >\n            <div id=\"kc-form\" className={clsx(realm.password && social.providers !== undefined && getClassName(\"kcContentWrapperClass\"))}>\n                <div\n                    id=\"kc-form-wrapper\"\n                    className={clsx(\n                        realm.password &&\n                        social.providers && [getClassName(\"kcFormSocialAccountContentClass\"), getClassName(\"kcFormSocialAccountClass\")]\n                    )}\n                >\n                    {realm.password && (\n                        <form id=\"kc-form-login\" onSubmit={onSubmit} action={url.loginAction} method=\"post\">\n                            <div className={getClassName(\"kcFormGroupClass\")}>\n                                {!usernameHidden &&\n                                    (() => {\n                                        const label = !realm.loginWithEmailAllowed\n                                            ? \"username\"\n                                            : realm.registrationEmailAsUsername\n                                                ? \"email\"\n                                                : \"usernameOrEmail\";\n\n                                        const autoCompleteHelper: typeof label = label === \"usernameOrEmail\" ? \"username\" : label;\n\n                                        return (\n                                            <>\n                                                <label htmlFor={autoCompleteHelper} className={getClassName(\"kcLabelClass\")}>\n                                                    {msg(label)}\n                                                </label>\n                                                <input\n                                                    tabIndex={1}\n                                                    id={autoCompleteHelper}\n                                                    className={getClassName(\"kcInputClass\")}\n                                                    //NOTE: This is used by Google Chrome auto fill so we use it to tell\n                                                    //the browser how to pre fill the form but before submit we put it back\n                                                    //to username because it is what keycloak expects.\n                                                    name={autoCompleteHelper}\n                                                    defaultValue={login.username ?? \"\"}\n                                                    type=\"text\"\n                                                    autoFocus={true}\n                                                    autoComplete=\"off\"\n                                                />\n                                            </>\n                                        );\n                                    })()}\n                            </div>\n                            <div className={getClassName(\"kcFormGroupClass\")}>\n                                <label htmlFor=\"password\" className={getClassName(\"kcLabelClass\")}>\n                                    {msg(\"password\")}\n                                </label>\n                                <input\n                                    tabIndex={2}\n                                    id=\"password\"\n                                    className={getClassName(\"kcInputClass\")}\n                                    name=\"password\"\n                                    type=\"password\"\n                                    autoComplete=\"off\"\n                                />\n                            </div>\n                            <div className={clsx(getClassName(\"kcFormGroupClass\"), getClassName(\"kcFormSettingClass\"))}>\n                                <div id=\"kc-form-options\">\n                                    {realm.rememberMe && !usernameHidden && (\n                                        <div className=\"checkbox\">\n                                            <label>\n                                                <input\n                                                    tabIndex={3}\n                                                    id=\"rememberMe\"\n                                                    name=\"rememberMe\"\n                                                    type=\"checkbox\"\n                                                    {...(login.rememberMe === \"on\"\n                                                        ? {\n                                                            \"checked\": true\n                                                        }\n                                                        : {})}\n                                                />\n                                                {msg(\"rememberMe\")}\n                                            </label>\n                                        </div>\n                                    )}\n                                </div>\n                                <div className={getClassName(\"kcFormOptionsWrapperClass\")}>\n                                    {realm.resetPasswordAllowed && (\n                                        <span>\n                                            <a tabIndex={5} href={url.loginResetCredentialsUrl}>\n                                                {msg(\"doForgotPassword\")}\n                                            </a>\n                                        </span>\n                                    )}\n                                </div>\n                            </div>\n                            <div id=\"kc-form-buttons\" className={getClassName(\"kcFormGroupClass\")}>\n                                <input\n                                    type=\"hidden\"\n                                    id=\"id-hidden-input\"\n                                    name=\"credentialId\"\n                                    {...(auth?.selectedCredential !== undefined\n                                        ? {\n                                            \"value\": auth.selectedCredential\n                                        }\n                                        : {})}\n                                />\n                                <input\n                                    tabIndex={4}\n                                    className={clsx(\n                                        getClassName(\"kcButtonClass\"),\n                                        getClassName(\"kcButtonPrimaryClass\"),\n                                        getClassName(\"kcButtonBlockClass\"),\n                                        getClassName(\"kcButtonLargeClass\")\n                                    )}\n                                    name=\"login\"\n                                    id=\"kc-login\"\n                                    type=\"submit\"\n                                    value={msgStr(\"doLogIn\")}\n                                    disabled={isLoginButtonDisabled}\n                                />\n                            </div>\n                        </form>\n                    )}\n                </div>\n                {realm.password && social.providers !== undefined && (\n                    <div\n                        id=\"kc-social-providers\"\n                        className={clsx(getClassName(\"kcFormSocialAccountContentClass\"), getClassName(\"kcFormSocialAccountClass\"))}\n                    >\n                        <ul\n                            className={clsx(\n                                getClassName(\"kcFormSocialAccountListClass\"),\n                                social.providers.length > 4 && getClassName(\"kcFormSocialAccountDoubleListClass\")\n                            )}\n                        >\n                            {social.providers.map(p => (\n                                <li key={p.providerId} className={getClassName(\"kcFormSocialAccountListLinkClass\")}>\n                                    <a href={p.loginUrl} id={`zocial-${p.alias}`} className={clsx(\"zocial\", p.providerId)}>\n                                        <span>{p.displayName}</span>\n                                    </a>\n                                </li>\n                            ))}\n                        </ul>\n                    </div>\n                )}\n            </div>\n        </Template>\n    );\n}\n"],"names":["my_custom_param","Login","props","kcContext","i18n","doUseDefaultCss","Template","classes","getClassName","useGetClassName","social","realm","url","usernameHidden","login","auth","registrationDisabled","msg","msgStr","isLoginButtonDisabled","setIsLoginButtonDisabled","useState","onSubmit","useConstCallback","e","formElement","_a","jsx","jsxs","clsx","label","autoCompleteHelper","Fragment","p"],"mappings":"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"}