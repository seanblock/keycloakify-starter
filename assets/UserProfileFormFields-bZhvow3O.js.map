{"version":3,"file":"UserProfileFormFields-bZhvow3O.js","sources":["../../node_modules/keycloakify/login/pages/shared/UserProfileFormFields.js"],"sourcesContent":["import { jsx as _jsx, jsxs as _jsxs, Fragment as _Fragment } from \"react/jsx-runtime\";\nimport { useEffect, Fragment } from \"react\";\nimport { clsx } from \"../../../tools/clsx\";\nimport { useFormValidation } from \"../../../login/lib/useFormValidation\";\nexport function UserProfileFormFields(props) {\n    const { kcContext, onIsFormSubmittableValueChange, i18n, getClassName, BeforeField, AfterField } = props;\n    const { advancedMsg, msg } = i18n;\n    const { formValidationState: { fieldStateByAttributeName, isFormSubmittable }, formValidationDispatch, attributesWithPassword } = useFormValidation({\n        kcContext,\n        i18n\n    });\n    useEffect(() => {\n        onIsFormSubmittableValueChange(isFormSubmittable);\n    }, [isFormSubmittable]);\n    let currentGroup = \"\";\n    return (_jsx(_Fragment, { children: attributesWithPassword.map((attribute, i) => {\n            var _a;\n            const { group = \"\", groupDisplayHeader = \"\", groupDisplayDescription = \"\" } = attribute;\n            const { value, displayableErrors } = fieldStateByAttributeName[attribute.name];\n            const formGroupClassName = clsx(getClassName(\"kcFormGroupClass\"), displayableErrors.length !== 0 && getClassName(\"kcFormGroupErrorClass\"));\n            return (_jsxs(Fragment, { children: [group !== currentGroup && (currentGroup = group) !== \"\" && (_jsxs(\"div\", Object.assign({ className: formGroupClassName }, { children: [_jsx(\"div\", Object.assign({ className: getClassName(\"kcContentWrapperClass\") }, { children: _jsx(\"label\", Object.assign({ id: `header-${group}`, className: getClassName(\"kcFormGroupHeader\") }, { children: advancedMsg(groupDisplayHeader) || currentGroup })) })), groupDisplayDescription !== \"\" && (_jsx(\"div\", Object.assign({ className: getClassName(\"kcLabelWrapperClass\") }, { children: _jsx(\"label\", Object.assign({ id: `description-${group}`, className: getClassName(\"kcLabelClass\") }, { children: advancedMsg(groupDisplayDescription) })) })))] }))), BeforeField && _jsx(BeforeField, { attribute: attribute }), _jsxs(\"div\", Object.assign({ className: formGroupClassName }, { children: [_jsxs(\"div\", Object.assign({ className: getClassName(\"kcLabelWrapperClass\") }, { children: [_jsx(\"label\", Object.assign({ htmlFor: attribute.name, className: getClassName(\"kcLabelClass\") }, { children: advancedMsg((_a = attribute.displayName) !== null && _a !== void 0 ? _a : \"\") })), attribute.required && _jsx(_Fragment, { children: \"*\" })] })), _jsxs(\"div\", Object.assign({ className: getClassName(\"kcInputWrapperClass\") }, { children: [(() => {\n                                        const { options } = attribute.validators;\n                                        if (options !== undefined) {\n                                            return (_jsx(\"select\", Object.assign({ id: attribute.name, name: attribute.name, onChange: event => formValidationDispatch({\n                                                    \"action\": \"update value\",\n                                                    \"name\": attribute.name,\n                                                    \"newValue\": event.target.value\n                                                }), onBlur: () => formValidationDispatch({\n                                                    \"action\": \"focus lost\",\n                                                    \"name\": attribute.name\n                                                }), value: value }, { children: _jsxs(_Fragment, { children: [_jsx(\"option\", Object.assign({ value: \"\", selected: true, disabled: true, hidden: true }, { children: msg(\"selectAnOption\") })), options.options.map(option => (_jsx(\"option\", Object.assign({ value: option }, { children: option }), option)))] }) })));\n                                        }\n                                        return (_jsx(\"input\", { type: (() => {\n                                                switch (attribute.name) {\n                                                    case \"password-confirm\":\n                                                    case \"password\":\n                                                        return \"password\";\n                                                    default:\n                                                        return \"text\";\n                                                }\n                                            })(), id: attribute.name, name: attribute.name, value: value, onChange: event => formValidationDispatch({\n                                                \"action\": \"update value\",\n                                                \"name\": attribute.name,\n                                                \"newValue\": event.target.value\n                                            }), onBlur: () => formValidationDispatch({\n                                                \"action\": \"focus lost\",\n                                                \"name\": attribute.name\n                                            }), className: getClassName(\"kcInputClass\"), \"aria-invalid\": displayableErrors.length !== 0, disabled: attribute.readOnly, autoComplete: attribute.autocomplete }));\n                                    })(), displayableErrors.length !== 0 &&\n                                        (() => {\n                                            const divId = `input-error-${attribute.name}`;\n                                            return (_jsxs(_Fragment, { children: [_jsx(\"style\", { children: `#${divId} > span: { display: block; }` }), _jsx(\"span\", Object.assign({ id: divId, className: getClassName(\"kcInputErrorMessageClass\"), style: {\n                                                            \"position\": displayableErrors.length === 1 ? \"absolute\" : undefined\n                                                        }, \"aria-live\": \"polite\" }, { children: displayableErrors.map(({ errorMessage }) => errorMessage) }))] }));\n                                        })()] }))] })), AfterField && _jsx(AfterField, { attribute: attribute })] }, i));\n        }) }));\n}\n//# sourceMappingURL=UserProfileFormFields.js.map"],"names":["UserProfileFormFields","props","kcContext","onIsFormSubmittableValueChange","i18n","getClassName","BeforeField","AfterField","advancedMsg","msg","fieldStateByAttributeName","isFormSubmittable","formValidationDispatch","attributesWithPassword","useFormValidation","useEffect","currentGroup","_jsx","_Fragment","attribute","i","_a","group","groupDisplayHeader","groupDisplayDescription","value","displayableErrors","formGroupClassName","clsx","_jsxs","Fragment","options","event","option","divId","errorMessage"],"mappings":"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","x_google_ignoreList":[0]}