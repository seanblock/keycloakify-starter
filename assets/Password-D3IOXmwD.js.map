{"version":3,"file":"Password-D3IOXmwD.js","sources":["../../node_modules/keycloakify/account/pages/Password.js"],"sourcesContent":["import { jsx as _jsx, jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { useState } from \"react\";\nimport { clsx } from \"../../tools/clsx\";\nimport { useGetClassName } from \"../../account/lib/useGetClassName\";\nexport default function Password(props) {\n    var _a;\n    const { kcContext, i18n, doUseDefaultCss, Template, classes } = props;\n    const { getClassName } = useGetClassName({\n        doUseDefaultCss,\n        \"classes\": Object.assign(Object.assign({}, classes), { \"kcBodyClass\": clsx(classes === null || classes === void 0 ? void 0 : classes.kcBodyClass, \"password\") })\n    });\n    const { url, password, account, stateChecker } = kcContext;\n    const { msgStr, msg } = i18n;\n    const [currentPassword, setCurrentPassword] = useState(\"\");\n    const [newPassword, setNewPassword] = useState(\"\");\n    const [newPasswordConfirm, setNewPasswordConfirm] = useState(\"\");\n    const [newPasswordError, setNewPasswordError] = useState(\"\");\n    const [newPasswordConfirmError, setNewPasswordConfirmError] = useState(\"\");\n    const [hasNewPasswordBlurred, setHasNewPasswordBlurred] = useState(false);\n    const [hasNewPasswordConfirmBlurred, setHasNewPasswordConfirmBlurred] = useState(false);\n    const checkNewPassword = (newPassword) => {\n        if (!password.passwordSet) {\n            return;\n        }\n        if (newPassword === currentPassword) {\n            setNewPasswordError(msgStr(\"newPasswordSameAsOld\"));\n        }\n        else {\n            setNewPasswordError(\"\");\n        }\n    };\n    const checkNewPasswordConfirm = (newPasswordConfirm) => {\n        if (newPasswordConfirm === \"\") {\n            return;\n        }\n        if (newPassword !== newPasswordConfirm) {\n            setNewPasswordConfirmError(msgStr(\"passwordConfirmNotMatch\"));\n        }\n        else {\n            setNewPasswordConfirmError(\"\");\n        }\n    };\n    return (_jsxs(Template, Object.assign({}, {\n        kcContext: Object.assign(Object.assign({}, kcContext), { \"message\": (() => {\n                if (newPasswordError !== \"\") {\n                    return {\n                        \"type\": \"error\",\n                        \"summary\": newPasswordError\n                    };\n                }\n                if (newPasswordConfirmError !== \"\") {\n                    return {\n                        \"type\": \"error\",\n                        \"summary\": newPasswordConfirmError\n                    };\n                }\n                return kcContext.message;\n            })() }),\n        i18n,\n        doUseDefaultCss,\n        classes\n    }, { active: \"password\" }, { children: [_jsxs(\"div\", Object.assign({ className: \"row\" }, { children: [_jsx(\"div\", Object.assign({ className: \"col-md-10\" }, { children: _jsx(\"h2\", { children: msg(\"changePasswordHtmlTitle\") }) })), _jsx(\"div\", Object.assign({ className: \"col-md-2 subtitle\" }, { children: _jsx(\"span\", Object.assign({ className: \"subtitle\" }, { children: msg(\"allFieldsRequired\") })) }))] })), _jsxs(\"form\", Object.assign({ action: url.passwordUrl, className: \"form-horizontal\", method: \"post\" }, { children: [_jsx(\"input\", { type: \"text\", id: \"username\", name: \"username\", value: (_a = account.username) !== null && _a !== void 0 ? _a : \"\", autoComplete: \"username\", readOnly: true, style: { \"display\": \"none\" } }), password.passwordSet && (_jsxs(\"div\", Object.assign({ className: \"form-group\" }, { children: [_jsx(\"div\", Object.assign({ className: \"col-sm-2 col-md-2\" }, { children: _jsx(\"label\", Object.assign({ htmlFor: \"password\", className: \"control-label\" }, { children: msg(\"password\") })) })), _jsx(\"div\", Object.assign({ className: \"col-sm-10 col-md-10\" }, { children: _jsx(\"input\", { type: \"password\", className: \"form-control\", id: \"password\", name: \"password\", autoFocus: true, autoComplete: \"current-password\", value: currentPassword, onChange: event => setCurrentPassword(event.target.value) }) }))] }))), _jsx(\"input\", { type: \"hidden\", id: \"stateChecker\", name: \"stateChecker\", value: stateChecker }), _jsxs(\"div\", Object.assign({ className: \"form-group\" }, { children: [_jsx(\"div\", Object.assign({ className: \"col-sm-2 col-md-2\" }, { children: _jsx(\"label\", Object.assign({ htmlFor: \"password-new\", className: \"control-label\" }, { children: msg(\"passwordNew\") })) })), _jsx(\"div\", Object.assign({ className: \"col-sm-10 col-md-10\" }, { children: _jsx(\"input\", { type: \"password\", className: \"form-control\", id: \"password-new\", name: \"password-new\", autoComplete: \"new-password\", value: newPassword, onChange: event => {\n                                        const newPassword = event.target.value;\n                                        setNewPassword(newPassword);\n                                        if (hasNewPasswordBlurred) {\n                                            checkNewPassword(newPassword);\n                                        }\n                                    }, onBlur: () => {\n                                        setHasNewPasswordBlurred(true);\n                                        checkNewPassword(newPassword);\n                                    } }) }))] })), _jsxs(\"div\", Object.assign({ className: \"form-group\" }, { children: [_jsx(\"div\", Object.assign({ className: \"col-sm-2 col-md-2\" }, { children: _jsx(\"label\", Object.assign({ htmlFor: \"password-confirm\", className: \"control-label two-lines\" }, { children: msg(\"passwordConfirm\") })) })), _jsx(\"div\", Object.assign({ className: \"col-sm-10 col-md-10\" }, { children: _jsx(\"input\", { type: \"password\", className: \"form-control\", id: \"password-confirm\", name: \"password-confirm\", autoComplete: \"new-password\", value: newPasswordConfirm, onChange: event => {\n                                        const newPasswordConfirm = event.target.value;\n                                        setNewPasswordConfirm(newPasswordConfirm);\n                                        if (hasNewPasswordConfirmBlurred) {\n                                            checkNewPasswordConfirm(newPasswordConfirm);\n                                        }\n                                    }, onBlur: () => {\n                                        setHasNewPasswordConfirmBlurred(true);\n                                        checkNewPasswordConfirm(newPasswordConfirm);\n                                    } }) }))] })), _jsx(\"div\", Object.assign({ className: \"form-group\" }, { children: _jsx(\"div\", Object.assign({ id: \"kc-form-buttons\", className: \"col-md-offset-2 col-md-10 submit\" }, { children: _jsx(\"div\", { children: _jsx(\"button\", Object.assign({ disabled: newPasswordError !== \"\" || newPasswordConfirmError !== \"\", type: \"submit\", className: clsx(getClassName(\"kcButtonClass\"), getClassName(\"kcButtonPrimaryClass\"), getClassName(\"kcButtonLargeClass\")), name: \"submitAction\", value: \"Save\" }, { children: msg(\"doSave\") })) }) })) }))] }))] })));\n}\n//# sourceMappingURL=Password.js.map"],"names":["Password","props","_a","kcContext","i18n","doUseDefaultCss","Template","classes","getClassName","useGetClassName","clsx","url","password","account","stateChecker","msgStr","msg","currentPassword","setCurrentPassword","useState","newPassword","setNewPassword","newPasswordConfirm","setNewPasswordConfirm","newPasswordError","setNewPasswordError","newPasswordConfirmError","setNewPasswordConfirmError","hasNewPasswordBlurred","setHasNewPasswordBlurred","hasNewPasswordConfirmBlurred","setHasNewPasswordConfirmBlurred","checkNewPassword","checkNewPasswordConfirm","_jsxs","_jsx","event"],"mappings":"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","x_google_ignoreList":[0]}