{"version":3,"file":"RegisterUserProfile-Bvo2ZP3L.js","sources":["../../src/keycloak-theme/login/pages/shared/UserProfileFormFields.tsx","../../src/keycloak-theme/login/pages/RegisterUserProfile.tsx"],"sourcesContent":["import { useEffect, Fragment } from \"react\";\nimport type { ClassKey } from \"keycloakify/login/TemplateProps\";\nimport { clsx } from \"keycloakify/tools/clsx\";\nimport { useFormValidation } from \"keycloakify/login/lib/useFormValidation\";\nimport type { Attribute } from \"keycloakify/login/kcContext/KcContext\";\nimport type { I18n } from \"../../i18n\";\n\nexport type UserProfileFormFieldsProps = {\n    kcContext: Parameters<typeof useFormValidation>[0][\"kcContext\"];\n    i18n: I18n;\n    getClassName: (classKey: ClassKey) => string;\n    onIsFormSubmittableValueChange: (isFormSubmittable: boolean) => void;\n    BeforeField?: (props: { attribute: Attribute }) => JSX.Element | null;\n    AfterField?: (props: { attribute: Attribute }) => JSX.Element | null;\n};\n\nexport function UserProfileFormFields(props: UserProfileFormFieldsProps) {\n    const { kcContext, onIsFormSubmittableValueChange, i18n, getClassName, BeforeField, AfterField } = props;\n\n    const { advancedMsg, msg } = i18n;\n\n    const {\n        formValidationState: { fieldStateByAttributeName, isFormSubmittable },\n        formValidationDispatch,\n        attributesWithPassword\n    } = useFormValidation({\n        kcContext,\n        i18n\n    });\n\n    useEffect(() => {\n        onIsFormSubmittableValueChange(isFormSubmittable);\n    }, [isFormSubmittable]);\n\n    let currentGroup = \"\";\n\n    return (\n        <>\n            {attributesWithPassword.map((attribute, i) => {\n                const { group = \"\", groupDisplayHeader = \"\", groupDisplayDescription = \"\" } = attribute;\n\n                const { value, displayableErrors } = fieldStateByAttributeName[attribute.name];\n\n                const formGroupClassName = clsx(\n                    getClassName(\"kcFormGroupClass\"),\n                    displayableErrors.length !== 0 && getClassName(\"kcFormGroupErrorClass\")\n                );\n\n                return (\n                    <Fragment key={i}>\n                        {group !== currentGroup && (currentGroup = group) !== \"\" && (\n                            <div className={formGroupClassName}>\n                                <div className={getClassName(\"kcContentWrapperClass\")}>\n                                    <label id={`header-${group}`} className={getClassName(\"kcFormGroupHeader\")}>\n                                        {advancedMsg(groupDisplayHeader) || currentGroup}\n                                    </label>\n                                </div>\n                                {groupDisplayDescription !== \"\" && (\n                                    <div className={getClassName(\"kcLabelWrapperClass\")}>\n                                        <label id={`description-${group}`} className={getClassName(\"kcLabelClass\")}>\n                                            {advancedMsg(groupDisplayDescription)}\n                                        </label>\n                                    </div>\n                                )}\n                            </div>\n                        )}\n\n                        {BeforeField && <BeforeField attribute={attribute} />}\n\n                        <div className={formGroupClassName}>\n                            <div className={getClassName(\"kcLabelWrapperClass\")}>\n                                <label htmlFor={attribute.name} className={getClassName(\"kcLabelClass\")}>\n                                    {advancedMsg(attribute.displayName ?? \"\")}\n                                </label>\n                                {attribute.required && <>*</>}\n                            </div>\n                            <div className={getClassName(\"kcInputWrapperClass\")}>\n                                {(() => {\n                                    const { options } = attribute.validators;\n\n                                    if (options !== undefined) {\n                                        return (\n                                            <select\n                                                id={attribute.name}\n                                                name={attribute.name}\n                                                onChange={event =>\n                                                    formValidationDispatch({\n                                                        \"action\": \"update value\",\n                                                        \"name\": attribute.name,\n                                                        \"newValue\": event.target.value\n                                                    })\n                                                }\n                                                onBlur={() =>\n                                                    formValidationDispatch({\n                                                        \"action\": \"focus lost\",\n                                                        \"name\": attribute.name\n                                                    })\n                                                }\n                                                value={value}\n                                            >\n                                                <>\n                                                    <option value=\"\" selected disabled hidden>\n                                                        {msg(\"selectAnOption\")}\n                                                    </option>\n                                                    {options.options.map(option => (\n                                                        <option key={option} value={option}>\n                                                            {option}\n                                                        </option>\n                                                    ))}\n                                                </>\n                                            </select>\n                                        );\n                                    }\n\n                                    return (\n                                        <input\n                                            type={(() => {\n                                                switch (attribute.name) {\n                                                    case \"password-confirm\":\n                                                    case \"password\":\n                                                        return \"password\";\n                                                    default:\n                                                        return \"text\";\n                                                }\n                                            })()}\n                                            id={attribute.name}\n                                            name={attribute.name}\n                                            value={value}\n                                            onChange={event =>\n                                                formValidationDispatch({\n                                                    \"action\": \"update value\",\n                                                    \"name\": attribute.name,\n                                                    \"newValue\": event.target.value\n                                                })\n                                            }\n                                            onBlur={() =>\n                                                formValidationDispatch({\n                                                    \"action\": \"focus lost\",\n                                                    \"name\": attribute.name\n                                                })\n                                            }\n                                            className={getClassName(\"kcInputClass\")}\n                                            aria-invalid={displayableErrors.length !== 0}\n                                            disabled={attribute.readOnly}\n                                            autoComplete={attribute.autocomplete}\n                                        />\n                                    );\n                                })()}\n                                {displayableErrors.length !== 0 &&\n                                    (() => {\n                                        const divId = `input-error-${attribute.name}`;\n\n                                        return (\n                                            <>\n                                                <style>{`#${divId} > span: { display: block; }`}</style>\n                                                <span\n                                                    id={divId}\n                                                    className={getClassName(\"kcInputErrorMessageClass\")}\n                                                    style={{\n                                                        \"position\": displayableErrors.length === 1 ? \"absolute\" : undefined\n                                                    }}\n                                                    aria-live=\"polite\"\n                                                >\n                                                    {displayableErrors.map(({ errorMessage }) => errorMessage)}\n                                                </span>\n                                            </>\n                                        );\n                                    })()}\n                            </div>\n                        </div>\n                        {AfterField && <AfterField attribute={attribute} />}\n                    </Fragment>\n                );\n            })}\n        </>\n    );\n}","// ejected using 'npx eject-keycloak-page'\nimport { useState } from \"react\";\nimport { clsx } from \"keycloakify/tools/clsx\";\nimport { UserProfileFormFields } from \"./shared/UserProfileFormFields\";\nimport type { PageProps } from \"keycloakify/login/pages/PageProps\";\nimport { useGetClassName } from \"keycloakify/login/lib/useGetClassName\";\nimport type { KcContext } from \"../kcContext\";\nimport type { I18n } from \"../i18n\";\n\nexport default function RegisterUserProfile(props: PageProps<Extract<KcContext, { pageId: \"register-user-profile.ftl\" }>, I18n>) {\n    const { kcContext, i18n, doUseDefaultCss, Template, classes } = props;\n\n    const { getClassName } = useGetClassName({\n        doUseDefaultCss,\n        classes\n    });\n\n    const { url, messagesPerField, recaptchaRequired, recaptchaSiteKey } = kcContext;\n\n    const { msg, msgStr } = i18n;\n\n    const [isFormSubmittable, setIsFormSubmittable] = useState(false);\n\n    return (\n        <Template\n            {...{ kcContext, i18n, doUseDefaultCss, classes }}\n            displayMessage={messagesPerField.exists(\"global\")}\n            displayRequiredFields={true}\n            headerNode={msg(\"registerTitle\")}\n        >\n            <form id=\"kc-register-form\" className={getClassName(\"kcFormClass\")} action={url.registrationAction} method=\"post\">\n                <UserProfileFormFields\n                    kcContext={kcContext}\n                    onIsFormSubmittableValueChange={setIsFormSubmittable}\n                    i18n={i18n}\n                    getClassName={getClassName}\n                />\n                {recaptchaRequired && (\n                    <div className=\"form-group\">\n                        <div className={getClassName(\"kcInputWrapperClass\")}>\n                            <div className=\"g-recaptcha\" data-size=\"compact\" data-sitekey={recaptchaSiteKey} />\n                        </div>\n                    </div>\n                )}\n                <div className={getClassName(\"kcFormGroupClass\")} style={{ \"marginBottom\": 30 }}>\n                    <div id=\"kc-form-options\" className={getClassName(\"kcFormOptionsClass\")}>\n                        <div className={getClassName(\"kcFormOptionsWrapperClass\")}>\n                            <span>\n                                <a href={url.loginUrl}>{msg(\"backToLogin\")}</a>\n                            </span>\n                        </div>\n                    </div>\n\n                    <div id=\"kc-form-buttons\" className={getClassName(\"kcFormButtonsClass\")}>\n                        <input\n                            className={clsx(\n                                getClassName(\"kcButtonClass\"),\n                                getClassName(\"kcButtonPrimaryClass\"),\n                                getClassName(\"kcButtonBlockClass\"),\n                                getClassName(\"kcButtonLargeClass\")\n                            )}\n                            type=\"submit\"\n                            value={msgStr(\"doRegister\")}\n                            disabled={!isFormSubmittable}\n                        />\n                    </div>\n                </div>\n            </form>\n        </Template>\n    );\n}\n"],"names":["UserProfileFormFields","props","kcContext","onIsFormSubmittableValueChange","i18n","getClassName","BeforeField","AfterField","advancedMsg","msg","fieldStateByAttributeName","isFormSubmittable","formValidationDispatch","attributesWithPassword","useFormValidation","useEffect","currentGroup","jsx","Fragment","attribute","i","group","groupDisplayHeader","groupDisplayDescription","value","displayableErrors","formGroupClassName","clsx","jsxs","options","event","option","divId","errorMessage","RegisterUserProfile","doUseDefaultCss","Template","classes","useGetClassName","url","messagesPerField","recaptchaRequired","recaptchaSiteKey","msgStr","setIsFormSubmittable","useState"],"mappings":"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"}